" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
"                    __ _ _____              _
"         ___ _ __  / _/ |___ /      __   __(_)_ __ ___
"        / __| '_ \| |_| | |_ \ _____\ \ / /| | '_ ` _ \
"        \__ \ |_) |  _| |___) |_____|\ V / | | | | | | |
"        |___/ .__/|_| |_|____/        \_/  |_|_| |_| |_|
"            |_|
"
"   This is the personal .vimrc.bundles file of Steve Francia.
"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   This file imports the various plugins of spf13. If you
"   wish to alter which groups are imported, see vimrc.before.
"   If you wish to add or remove individual bundles, create
"   ~/.vimrc.bundles.local and `Bundle` or `UnBundle` as needed
"   from there.
"
"   You can find me at http://spf13.com
" }

" Environment {

    " Basics {
        set nocompatible        " Must be first line
        set background=dark     " Assume a dark background
    " }

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if has('win32') || has('win64')
          set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

          " Be nice and check for multi_byte even if the config requires
          " multi_byte support most of the time
          if has("multi_byte")
            " Windows cmd.exe still uses cp850. If Windows ever moved to
            " Powershell as the primary terminal, this would be utf-8
            set termencoding=cp850
            " Let Vim use utf-8 internally, because many scripts require this
            set encoding=utf-8
            setglobal fileencoding=utf-8
            " Windows has traditionally used cp1252, so it's probably wise to
            " fallback into cp1252 instead of eg. iso-8859-15.
            " Newer Windows files might contain utf-8 or utf-16 LE so we might
            " want to try them first.
            set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
          endif
        endif
    " }

    " Setup Bundle Support {
        " The next three lines ensure that the ~/.vim/bundle/ system works
        " filetype off
        " set rtp+=~/.vim/bundle/vundle
        " call vundle#rc()
        set rtp+=~/.vim/bundle/vim-plug
        call plug#begin('~/.vim/bundle')
    " }

    " Add an UnBundle command {
    " function! UnBundle(arg, ...)
      " let bundle = vundle#config#init_bundle(a:arg, a:000)
      " call filter(g:vundle#bundles, 'v:val["name_spec"] != "' . a:arg . '"')
    " endfunction

    " com! -nargs=+         UnBundle
    " \ call UnBundle(<args>)
    " }

" }

" Bundles {

    " Deps {
        " Bundle 'gmarik/vundle'
        Plug 'junegunn/vim-plug'
        Plug 'MarcWeber/vim-addon-mw-utils'
        Plug 'tomtom/tlib_vim'
        if executable('ag')
            Plug 'mileszs/ack.vim'
            let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
        elseif executable('ack-grep')
            let g:ackprg="ack-grep -H --nocolor --nogroup --column"
            Plug 'mileszs/ack.vim'
        elseif executable('ack')
            Plug 'mileszs/ack.vim'
        endif
    " }

    " In your .vimrc.before.local file
    " list only the plugin groups you will use
    if !exists('g:spf13_bundle_groups')
        let g:spf13_bundle_groups=['general', 'writing', 'neocomplete', 'programming', 'php', 'ruby', 'python', 'javascript', 'html', 'misc',]
    endif

    " To override all the included bundles, add the following to your
    " .vimrc.bundles.local file:
    "   let g:override_spf13_bundles = 1
    if !exists("g:override_spf13_bundles")

    " General {
        if count(g:spf13_bundle_groups, 'general')
            " NERD tree will be loaded on the first invocation of NERDTreeToggle command
            Plug 'scrooloose/nerdtree'
            Plug 'jistr/vim-nerdtree-tabs'
            Plug 'altercation/vim-colors-solarized'
            Plug 'spf13/vim-colors'
            Plug 'tpope/vim-surround'
            Plug 'tpope/vim-repeat'
            Plug 'rhysd/conflict-marker.vim'
            "Plug 'jiangmiao/auto-pairs'
            Plug 'Raimondi/delimitMate'
            Plug 'ctrlpvim/ctrlp.vim'
            Plug 'tacahiroy/ctrlp-funky'
            Plug 'terryma/vim-multiple-cursors'
            Plug 'vim-scripts/sessionman.vim'
            Plug 'matchit.zip'
            Plug 'Shougo/vimproc.vim', {'do': 'make'}
            if (has("python") || has("python3")) && exists('g:spf13_use_powerline') && !exists('g:spf13_use_old_powerline')
                Plug 'Lokaltog/powerline', {'rtp':'/powerline/bindings/vim'}
            elseif exists('g:spf13_use_powerline') && exists('g:spf13_use_old_powerline')
                Plug 'Lokaltog/vim-powerline'
            else
                Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
            endif
            Plug 'powerline/fonts'
            "Plug 'bling/vim-bufferline'
            Plug 'easymotion/vim-easymotion'
            Plug 'flazz/vim-colorschemes'
            Plug 'mbbill/undotree'
            Plug 'nathanaelkane/vim-indent-guides'
            if !exists('g:spf13_no_views')
                Plug 'vim-scripts/restore_view.vim'
            endif
            Plug 'mhinz/vim-signify'
            Plug 'tpope/vim-abolish'
            Plug 'osyo-manga/vim-over'
            Plug 'kana/vim-textobj-user'
            Plug 'kana/vim-textobj-indent'
            Plug 'gcmt/wildfire.vim'
            "Plug 'cazador481/fakeclip.neovim'
            Plug 'zenbro/mirror.vim'
        endif
    " }

    " Writing {
        if count(g:spf13_bundle_groups, 'writing')
            Plug 'reedes/vim-litecorrect'
            Plug 'reedes/vim-textobj-sentence'
            Plug 'reedes/vim-textobj-quote'
            Plug 'reedes/vim-wordy'
        endif
    " }
    
    " Pandoc {
        if count(g:spf13_bundle_groups, 'pandoc')
            Plug 'vim-pandoc/vim-pandoc-syntax'
        endif
    " }

    " General Programming {
        if count(g:spf13_bundle_groups, 'programming')
            " Pick one of the checksyntax, jslint, or syntastic
            "Plug 'scrooloose/syntastic', { 'for': [] }
            Plug 'tpope/vim-fugitive'
            Plug 'mattn/webapi-vim'
            Plug 'mattn/gist-vim'
            Plug 'scrooloose/nerdcommenter'
            Plug 'tpope/vim-commentary'
            Plug 'godlygeek/tabular'
            Plug 'benekastah/neomake', { 'do': 'pip install pylint'}
            Plug 'Chiel92/vim-autoformat'
            Plug 'luochen1990/rainbow'
            Plug 'kien/rainbow_parentheses.vim'
            Plug 'thinca/vim-quickrun'
            Plug 'janko-m/vim-test'
            Plug 'Xuyuanp/nerdtree-git-plugin'
            " CVS/SVN/SVK/git/hk/bzr integration
            "Plug 'vim-scripts/vcscommand.vim'
            Plug 'qstrahl/vim-matchmaker'
            " a solid language pack for vim
            Plug 'sheerun/vim-polyglot'
            if executable('ctags')
                Plug 'majutsushi/tagbar'
            endif
        endif
    " }

    " Snippets & AutoComplete {
        if count(g:spf13_bundle_groups, 'snipmate')
            Plug 'garbas/vim-snipmate'
            Plug 'honza/vim-snippets'
            " Source support_function.vim to support vim-snippets.
            if filereadable(expand("~/.vim/bundle/vim-snippets/snippets/support_functions.vim"))
                source ~/.vim/bundle/vim-snippets/snippets/support_functions.vim
            endif
        elseif count(g:spf13_bundle_groups, 'youcompleteme')
            function! BuildYCM(info)
              " info is a dictionary with 3 fields
              " - name:   name of the plugin
              " - status: 'installed', 'updated', or 'unchanged'
              " - force:  set on PlugInstall! or PlugUpdate!
              if a:info.status == 'installed' || a:info.force
                !./install.py --clang-completer  --gocode-completer
              endif
            endfunction

            Plug 'Valloric/YouCompleteMe',
                    \ { 
                        \ 'do': function('BuildYCM')
                    \ }
            " Using a non-master branch
            Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

            " Group dependencies, vim-snippets depends on ultisnips
            Plug 'SirVer/ultisnips' |  Plug 'honza/vim-snippets'
        elseif count(g:spf13_bundle_groups, 'neocomplcache')
            Plug 'Shougo/neocomplcache'
            Plug 'Shougo/neosnippet'
            Plug 'Shougo/neosnippet-snippets'
            Plug 'honza/vim-snippets'
        elseif count(g:spf13_bundle_groups, 'neocomplete')
            Plug 'Shougo/neocomplete.vim.git'
            Plug 'Shougo/neosnippet'
            Plug 'Shougo/neosnippet-snippets'
            Plug 'honza/vim-snippets'
        endif
        function! DoRemote(arg)
          UpdateRemotePlugins
        endfunction
        if count(g:spf13_bundle_groups, 'deoplete')
            Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }
            Plug 'Shougo/neco-vim'
            "Plug 'Shougo/neosnippet.vim'
            "Plug 'Shougo/neosnippet-snippets'
            Plug 'Shougo/neoinclude.vim'
            Plug 'Shougo/neco-syntax'
            " use ultisnips snippet engine
            Plug 'SirVer/ultisnips' |  Plug 'honza/vim-snippets'
            "Plug 'Shougo/echodoc'
            Plug 'zchee/deoplete-jedi', { 'for': 'python' }
            Plug 'zchee/deoplete-go',{ 'for': ['go'] }
            " Plug 'zchee/deoplete-clang', { 'for': ['c', 'cpp', 'objc', 'objcpp'] }
            Plug 'carlitux/deoplete-ternjs', { 'for': ['javascript', 'jsx', 'javascript.jsx', 'html'], 'do': 'npm install' }
        endif
    " }

    " C, CPP, objc, objcpp {
        Plug 'Rip-Rip/clang_complete',{ 'for': ['c', 'cpp', 'objc', 'objcpp'], 'do': '' } |
                    \ "we don't need this plugin to complete header file anymore
                    " \ Plug 'xaizek/vim-inccomplete', { 'for': [] }
        Plug 'critiqjo/lldb.nvim', { 'for': ['c', 'cpp', 'objc', 'objcpp'] }
    " }
    " Objective-c {
        Plug 'b4winckler/vim-objc', { 'for': ['objc', 'objcpp', 'swift'] }
        Plug 'eraserhd/vim-ios', { 'for': ['objc', 'objcpp', 'swift'] }
        Plug 'gfontenot/vim-xcode', { 'for': ['objc', 'objcpp', 'swift'] }
        " method list, documentation
        " Plug 'msanders/cocoa.vim', { 'for': ['objc', 'objcpp'] }
    " }
    " swift {
        Plug 'keith/swift.vim', { 'for': ['swift'] }
        Plug 'toyamarinyon/vim-swift', {'for': ['swift']}
    " }


    " PHP {
        if count(g:spf13_bundle_groups, 'php')
            Plug 'spf13/PIV', { 'for': ['php'] }
            Plug 'arnaud-lb/vim-php-namespace', { 'for': ['php'] }
            Plug 'beyondwords/vim-twig', { 'for': ['php'] }
        endif
    " }

    " Python {
        if count(g:spf13_bundle_groups, 'python')
            " Pick either python-mode or pyflakes & pydoc
            Plug 'yssource/python.vim', { 'for': ['python'] }
            Plug 'python_match.vim', { 'for': ['python'] }
            "Plug 'pythoncomplete', { 'for': ['python'] }
            Plug 'davidhalter/jedi-vim', { 'for': 'python' }
            "Plug 'klen/python-mode', { 'for': ['python'] }
            Plug 'hynek/vim-python-pep8-indent', {'for': ['python']}
            Plug 'bfredl/nvim-ipy', {'for': ['python', 'r']}
        endif
    " }

    " R {
        if count(g:spf13_bundle_groups, 'R')
            Plug 'jalvesaq/Nvim-R', { 'for': ['r'] }
            "Plug 'vim-scripts/Vim-R-plugin', { 'for': ['r'] }
        endif
    " }

    " Javascript {
        if count(g:spf13_bundle_groups, 'javascript')
            Plug 'groenewege/vim-less', { 'for': ['javascript'] }
            Plug 'pangloss/vim-javascript', { 'for': ['javascript'] }
            "Plug 'briancollins/vim-jst', { 'for': ['javascript'] }
            Plug 'kchmck/vim-coffee-script', { 'for': ['javascript'] }
            " Plug 'marijnh/tern_for_vim', { 'for': ['javascript', 'jsx', 'javascript.jsx', 'html'], 'do': 'npm install' }
            "Plug 'isRuslan/vim-es6', { 'for': ['javascript'] }
            Plug 'othree/yajs.vim', { 'for': ['javascript'] }
            Plug 'mxw/vim-jsx', { 'for': ['javascript'] }
            Plug 'moll/vim-node', { 'for': ['javascript'] }
        endif
    " }

    " Scala {
        if count(g:spf13_bundle_groups, 'scala')
            Plug 'derekwyatt/vim-scala', { 'for': ['scala'] }
            Plug 'derekwyatt/vim-sbt', { 'for': ['scala'] }
            Plug 'xptemplate', { 'for': ['scala'] }
        endif
    " }

    " Haskell {
        if count(g:spf13_bundle_groups, 'haskell')
            Plug 'travitch/hasksyn', { 'for': ['haskell'] }
            Plug 'dag/vim2hs', { 'for': ['haskell'] }
            Plug 'Twinside/vim-haskellConceal', { 'for': ['haskell'] }
            Plug 'Twinside/vim-haskellFold', { 'for': ['haskell'] }
            Plug 'lukerandall/haskellmode-vim', { 'for': ['haskell'] }
            Plug 'eagletmt/neco-ghc', { 'for': ['haskell'] }
            Plug 'eagletmt/ghcmod-vim', { 'for': ['haskell'] }
            Plug 'adinapoli/cumino', { 'for': ['haskell'] }
            Plug 'bitc/vim-hdevtools', { 'for': ['haskell'] }
            Plug 'neovimhaskell/haskell-vim', { 'for': ['haskell'] }
        endif
    " }

    " HTML {
        if count(g:spf13_bundle_groups, 'html')
            Plug 'amirh/HTML-AutoCloseTag', { 'for': ['css', 'html', 'javascript', 'xml']}
            Plug 'hail2u/vim-css3-syntax', { 'for': ['css', 'html', 'javascript']}
            Plug 'gorodinskiy/vim-coloresque', { 'for': ['css', 'html', 'javascript']}
            Plug 'tpope/vim-haml', { 'for': ['haml', 'sass', 'scss'] }
        endif
        Plug 'mattn/emmet-vim', {'for': ['html','javascript', 'css', 'jsx', 'javascript.jsx' ]}
    " }

    " Ruby {
        if count(g:spf13_bundle_groups, 'ruby')
            Plug 'tpope/vim-rails', { 'for': ['ruby'] }
            let g:rubycomplete_buffer_loading = 1
            "let g:rubycomplete_classes_in_global = 1
            "let g:rubycomplete_rails = 1
        endif
    " }

    " Puppet {
        if count(g:spf13_bundle_groups, 'puppet')
            Plug 'rodjek/vim-puppet'
        endif
    " }

    " Go Lang {
        if count(g:spf13_bundle_groups, 'go')
            Plug 'Blackrush/vim-gocode', { 'for': ['go'] }
            Plug 'fatih/vim-go', { 'for': ['go']}
        endif
    " }

    " Elixir {
        if count(g:spf13_bundle_groups, 'elixir')
            Plug 'elixir-lang/vim-elixir'
            Plug 'carlosgaldino/elixir-snippets'
            Plug 'mattreduce/vim-mix'
        endif
    " }

    " Misc {
        if count(g:spf13_bundle_groups, 'misc')
            Plug 'plasticboy/vim-markdown', { 'for': ['markdown'] }
            Plug 'tpope/vim-cucumber'
            Plug 'cespare/vim-toml', { 'for': ['toml'] }
            Plug 'quentindecock/vim-cucumber-align-pipes'
            Plug 'saltstack/salt-vim'
            Plug 'chrisbra/csv.vim', { 'for': ['csv'] }

            function! BuildComposer(info)
              if a:info.status != 'unchanged' || a:info.force
                !cargo build --release
                UpdateRemotePlugins
              endif
            endfunction

            " FIXME: plugin not working
            "Plug 'suan/vim-instant-markdown', {'for': ['markdown'], 'do': 'npm install -g instant-markdown-d'}
            "autocmd Filetype markdown set shell=bash\ -i
        endif
    " }
    
    " Rust {
        Plug 'rust-lang/rust.vim', { 'for': ['rust']}
        function! DownloadRust(info)
          " info is a dictionary with 3 fields
          " - name:   name of the plugin
          " - status: 'installed', 'updated', or 'unchanged'
          " - force:  set on PlugInstall! or PlugUpdate!
          if a:info.status == 'installed' || a:info.force
            !git clone git@github.com:rust-lang/rust.git ${HOME}/.rust/src;
            !echo "export RUST_SRC_PATH=${HOME}/.rust/src/src" >> ~/.zshrc
            !echo "export RUST_SRC_PATH=${HOME}/.rust/src/src" >> ~/.bashrc
          endif
        endfunction
        Plug 'ebfe/vim-racer',
                    \ {
                        \ 'for': ['rust'],
                        \ 'do': 'DownloadRust'
                    \ }
    " }

    " github {
        if count(g:spf13_bundle_groups, 'github')
            " Using git URL
            Plug 'https://github.com/junegunn/vim-github-dashboard.git'
        endif
    " }

    " SQL {
        Plug 'vim-scripts/SQLUtilities', { 'for': ['sql'] }
        Plug 'vim-scripts/SQLComplete.vim', { 'for': ['sql']}
        Plug 'vim-scripts/dbext.vim', { 'for': ['sql']}
    " }

    " lua {
        Plug 'xolox/vim-misc' | Plug 'xolox/vim-lua-ftplugin', {'for':['lua']}
    "

    " java {
        Plug 'artur-shaik/vim-javacomplete2', { 'for': ['java'] }
    " }

    " json {
        Plug 'elzr/vim-json', { 'for': ['json'] }
    " }

    endif

" }

    " LaTex {
        Plug 'lervag/vimtex', {'for': ['tex']}
    " }

" Plugins {
    " Setup vim-plug Support {
        " The next line ensures that the ~/.vim/bundle/ system works
        call plug#end()
    " }
" }

" Use fork bundles config if available {
    if filereadable(expand("~/.vimrc.bundles.fork"))
        source ~/.vimrc.bundles.fork
    endif
" }

" Use local bundles config if available {
    if filereadable(expand("~/.vimrc.bundles.local"))
        source ~/.vimrc.bundles.local
    endif
" }
